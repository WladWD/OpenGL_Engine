#define GLEW_STATIC
#include <glew.h>
#include <Windows.h>
#include <stdint.h>

#include "LoadStructure.h"
#include "ShaderSkyDome.h"
#include "LoadTexture.h"
#include "AtmosphereParameter.h"


#pragma once
namespace Atmosphere
{
	class DrawSkyDome
	{
		////////////////////////////////////////////////////////////////////////
		GLuint RayLeighTexture;
		GLuint MieTexture;
		////////////////////////////////////////////////////////////////////////
		GLuint StarTexture;
		////////////////////////////////////////////////////////////////////////
		uint32_t DomeN;
		uint32_t DV_Size, DI_Size;
		////////////////////////////////////////////////////////////////////////
		GLuint SD_VAO, SD_VB;
		GLuint SD_IB;
		////////////////////////////////////////////////////////////////////////
		Shader::ShaderSkyDome *shader_sky_dome;
		////////////////////////////////////////////////////////////////////////
		void GenerateDome(void);
		void InitShaderVariable(void);
	public:
		DrawSkyDome(GLuint StarTexture, GLuint RayLeighTexture, GLuint MieTexture);
		~DrawSkyDome();
		////////////////////////////////////////////////////////////////////////
		void Draw(glm::mat4 pvw, const Atmosphere::GlobalLightingParam *atmosphere_parameter, const ScatteringParam *scattering_param);
	};
}
/*const int tex_width;
		const int tex_height;
		////////////////////////////////////////////////////////////////////////
		Resource::MapResource *texture_map;
		////////////////////////////////////////////////////////////////////////
		GLuint star_texture_id;
		////////////////////////////////////////////////////////////////////////
		glm::vec3 lightDirection;
		float Phi, Thetta;
		float m_s_time;
		double m_const;
		////////////////////////////////////////////////////////////////////////
		uint32_t DomeN;
		uint32_t DV_Size, DI_Size;
		////////////////////////////////////////////////////////////////////////
		GLuint SD_VAO, SD_VB;
		GLuint SD_IB;
		////////////////////////////////////////////////////////////////////////
		GLuint QUAD_VAO, QUAD_VB;
		GLuint QUAD_IB;
		////////////////////////////////////////////////////////////////////////
		GLuint FrameBuffer_Update;
		GLuint RayLeighTexture;
		GLuint MieTexture;
		GLuint DepthTexture;
		////////////////////////////////////////////////////////////////////////
		Shader::ShaderUpdateSky *shader_update_sky;
		Shader::ShaderSkyDome *shader_sky_dome;
		////////////////////////////////////////////////////////////////////////
		void InitFramebuffer(void);
		////////////////////////////////////////////////////////////////////////
		void GenerateDome(void);
		
		void GenQuad(void);

		glm::vec3 GetDirection(void);
	public:
		DrawSkyDome(Resource::MapResource *texture_map);
		~DrawSkyDome();

		void Update(float delta_ms);
		void Draw(glm::mat4 pvw);*/
