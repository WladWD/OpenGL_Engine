#version 440 core
////////////////////////////////////////////////////
in struct VertexOut
{
	vec3 w_pos;
	vec2 w_tex;
} vertex_out;
////////////////////////////////////////////////////
layout (location = 0)uniform float InvOpticalDepthNLessOne;// = 1.0f/255.0f;
layout (location = 1)uniform float InvOpticalDepthN;//  = 1.0f/256.0f;
layout (location = 2)uniform float InnerRadius;//  = 6356.7523142;
layout (location = 3)uniform float OuterRadius;//  = 6356.7523142 * 1.0157313;
layout (location = 4)uniform float PI;//  = 3.1415159;
layout (location = 5)uniform float NumSamples;//  = 20;
layout (location = 6)uniform float fScale;//  = 1.0 / (6356.7523142 * 1.0157313 - 6356.7523142);
layout (location = 7)uniform vec2 v2dRayleighMieScaleHeight;//  = vec2(0.25, 0.1);
////////////////////////////////////////////////////
layout (location = 8)uniform vec2 InvRayleighMieNLessOne;//  = vec2(1.0f/255.0f, 1.0f/127.0f);
layout (location = 9)uniform vec3 v3SunDir;//  = vec3( 0, 1, 0 );
//float ESun = 20.0f;
//float Kr = 0.0025f;
//float Km = 0.0010f;
layout (location = 10)uniform float KrESun;//  = 0.0025f * 20.0f;
layout (location = 11)uniform float KmESun;//  = 0.0010f * 20.0f;
layout (location = 12)uniform float Kr4PI;//  = 0.0025f * 4.0f * 3.1415159;
layout (location = 13)uniform float Km4PI;//  = 0.0010f * 4.0f * 3.1415159;
////////////////////////////////////////////////////
layout (location = 14)uniform float g;//  = -0.990;
layout (location = 15)uniform float g2;//  = (-0.990) * (-0.990);
layout (location = 16)uniform float fExposure;//  = -2.0;
////////////////////////////////////////////////////
layout (location = 17)uniform vec3 InvWavelength;
layout (location = 18)uniform vec3 WavelengthMie;
////////////////////////////////////////////////////
layout (location = 19)uniform float starIntensity;//  = 0.5f;
////////////////////////////////////////////////////
float HitOuterSphere( vec3 O, vec3 Dir ) 
{
	vec3 L = -O;

	float B = dot( L, Dir );
	float C = dot( L, L );
	float D = C - B * B; 
	float q = sqrt( OuterRadius * OuterRadius - D );
	float t = B;
	t += q;

	return t;
}

vec2 GetDensityRatio( float fHeight )
{
	const float fAltitude = (fHeight - InnerRadius) * fScale;
	return exp( (-fAltitude) / v2dRayleighMieScaleHeight.xy );
}

vec2 t( vec3 P, vec3 Px )
{

	vec2 OpticalDepth = vec2(0.0);

	vec3 v3Vector =  Px - P;
	float fFar = length( v3Vector );
	vec3 v3Dir = v3Vector / fFar;
			
	float fSampleLength = fFar / NumSamples;
	float fScaledLength = fSampleLength * fScale;
	vec3 v3SampleRay = v3Dir * fSampleLength;
	P += v3SampleRay * 0.5f;
			
	for(int i = 0; i < NumSamples; i++)
	{
		float fHeight = length( P );
		OpticalDepth += GetDensityRatio( fHeight );
		P += v3SampleRay;
	}		

	OpticalDepth *= fScaledLength;
	return OpticalDepth;
}
////////////////////////////////////////////////////
layout (location = 0) out vec4 RayLeighTexture;
layout (location = 1) out vec4 MieTexture;
////////////////////////////////////////////////////
void main()
{
	vec2 Tex0 = (vertex_out.w_tex);
	 
	const vec3 v3PointPv = vec3( 0, InnerRadius + (1e-3), 0 );
	const float AngleY = (100.0 * Tex0.x * PI) / 180.0;
	const float AngleXZ = PI * Tex0.y;
	
	vec3 v3Dir;
	v3Dir.x = sin( AngleY ) * cos( AngleXZ  );
	v3Dir.y = cos( AngleY );
	v3Dir.z = sin( AngleY ) * sin( AngleXZ  );
	v3Dir = normalize( v3Dir );

	float fFarPvPa = HitOuterSphere( v3PointPv , v3Dir );
	vec3 v3Ray = v3Dir;

	vec3 v3PointP = v3PointPv;
	float fSampleLength = fFarPvPa / NumSamples;
	float fScaledLength = fSampleLength * fScale;
	vec3 v3SampleRay = v3Ray * fSampleLength;
	v3PointP += v3SampleRay * 0.5f;
				
	vec3 v3RayleighSum = vec3(0);
	vec3 v3MieSum = vec3(0);
	
	for( int k = 0; k < NumSamples; k++ )
	{
		float PointPHeight = length( v3PointP );

		vec2 DensityRatio = GetDensityRatio( PointPHeight );
		DensityRatio *= fScaledLength;

		vec2 ViewerOpticalDepth = t( v3PointP, v3PointPv );
						
		float dFarPPc = HitOuterSphere( v3PointP, v3SunDir );
		vec2 SunOpticalDepth = t( v3PointP, v3PointP + (v3SunDir * dFarPPc) );

		vec2 OpticalDepthP = SunOpticalDepth.xy + ViewerOpticalDepth.xy;
		vec3 v3Attenuation = vec3(exp( (-Kr4PI * InvWavelength * OpticalDepthP.x) - (Km4PI * OpticalDepthP.y)));

		v3RayleighSum += DensityRatio.x * v3Attenuation;
		v3MieSum += DensityRatio.y * v3Attenuation;

		v3PointP += v3SampleRay;
	}

	vec3 RayLeigh = v3RayleighSum * KrESun;
	vec3 Mie = v3MieSum * KmESun;
	RayLeigh *= InvWavelength;
	Mie *= WavelengthMie;
	
	RayLeighTexture = vec4( RayLeigh, 1.0f);
	MieTexture = vec4( Mie, 1.0f );
}




