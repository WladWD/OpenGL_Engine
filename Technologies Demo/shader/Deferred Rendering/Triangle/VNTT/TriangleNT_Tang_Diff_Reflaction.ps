//#version 440 core
////////////////////////////////////////////////////
#ifdef NOT_USE_CLIP_ALPHA
layout(early_fragment_tests) in;
#endif
////////////////////////////////////////////////////
in struct VertexOut
{
	vec3 w_pos;
	vec3 w_normal;
	vec3 w_tangent;
	vec3 w_eye_dir;
	vec2 w_tex;
} vertex_out;
////////////////////////////////////////////////////
layout (location = 0)uniform mat4 g_proj_view;
layout (location = 1)uniform vec3 g_cam_pos;
////////////////////////////////////////////////////
layout (location = 2)uniform vec4 m_diffuse;
layout (location = 3)uniform vec4 m_specular;
layout (location = 4)uniform vec4 m_emissive;
////////////////////////////////////////////////////
layout (location = 5, binding = 0)uniform sampler2D g_diffuse;
layout (location = 6, binding = 1)uniform sampler2D g_normal;
layout (location = 7, binding = 2)uniform sampler2D g_specular;//only red chanel
layout (location = 8, binding = 3)uniform samplerCube g_reflaction;
////////////////////////////////////////////////////
vec3 ComputeBumpNormal(vec3 bump_map_normal, vec3 normal, vec3 tangent)
{
	vec3 Normal0 = normalize(normal);
	vec3 Tangent0 = normalize(tangent);
	Tangent0 = normalize(Tangent0 - (dot(Tangent0, Normal0) * Normal0));
	vec3 BiNormal0 = cross(Tangent0, Normal0);

	bump_map_normal = (bump_map_normal * 2.0f) - vec3(1.0f);
	bump_map_normal = normalize(bump_map_normal);
	vec3 Normal_Computed;
	mat3 TBN = mat3(Tangent0, BiNormal0, Normal0);
	Normal_Computed = TBN * bump_map_normal;
	Normal_Computed = normalize(Normal_Computed);
	return Normal_Computed;
}
////////////////////////////////////////////////////
layout (location = 0) out vec4 out_color_0;//normal r32g32b32a32  a - shininess(specular power) //vec4
layout (location = 1) out vec4 out_color_1;//diffuse r8g8b8a8, a - specular intensity
layout (location = 2) out vec4 out_color_2;//specular r8g8b8a8, a - specular power, but spec power = a*255.0f;
////////////////////////////////////////////////////
void main()
{
	vec3 normal   = normalize(vertex_out.w_normal);
	vec3 tangent   = normalize(vertex_out.w_tangent);
	vec3 viewDir  = normalize(-vertex_out.w_eye_dir);
	vec3 reflactinDir = normalize(reflect(viewDir, normal));
	reflactinDir.y = -reflactinDir.y;


	vec4 diff_tex_color = texture(g_diffuse, vertex_out.w_tex);
	vec4 normalmap_normal = texture(g_normal, vertex_out.w_tex);
	float spec_val = texture(g_specular, vertex_out.w_tex).r;
	vec4 spec_tex_reflaction = texture(g_reflaction, reflactinDir);
	vec4 diff_tex_reflaction = textureLod(g_reflaction, reflactinDir, float(textureQueryLevels(g_reflaction)) * 0.6f);

#ifndef USE_NO_CLIP_ALPHA 
if(diff_tex_color.a < 0.6f)discard;
#endif

#ifdef USE_NO_CLIP_ALPHA 
//if(!gl_FrontFacing)normal = -normal;
#endif

	normal = ComputeBumpNormal(normalmap_normal.xyz, normal, tangent);
	//normal = vec3(0.5f)*normal + vec3(0.5f);

	out_color_0.xyz = normal;
	out_color_0.a = m_specular.a;
	//normal.z = sqrt(1 - dot(vec3(out_color_0.xy, 0.0f)));

	vec4 diff_color = m_diffuse * diff_tex_color;//* ( 1.0f + m_diffuse)
	vec4 spec_color = m_specular;

	float diff_intensity = spec_val * 0.55f;//clamp(dot(diff_color.rgb, diff_color.rgb), 0.0f, 1.0f);//0.45f;
	float spec_intensity = spec_val * 0.75f;

	out_color_1 = mix(diff_color, diff_color * diff_tex_reflaction, diff_intensity);
	out_color_1.a = m_diffuse.a;
	//out_color_1 = mix(out_color_1, out_color_1 + spec_color * spec_tex_reflaction, spec_intensity);

	//out_color_1 = mix(m_diffuse * diff_tex_color , spec_tex_reflaction * spec_val * m_specular, spec_val);//
	//m_diffuse * diff_tex_color + spec_tex_reflaction * spec_val * m_specular;// + m_emissive;
	//out_color_1.a = spec_val;
	out_color_2 = mix(spec_color, spec_color * spec_tex_reflaction, spec_intensity);//m_specular;
	out_color_2.a = spec_val;///= 255.0f;
}
