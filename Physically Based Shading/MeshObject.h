#include "LoadStructure.h"

#pragma once
namespace MEngine
{
	class MeshObject
	{
		char name_object[81];// - содержит имя обькта//0-byte
		uint32_t name_object_size;//длина имени обьекта 
		///////////////////////////////////////////////////////////////////////////////
		uint32_t vertex_count;//содержит количество вершин в обькте 
		//uint32_t normal_count;//содержит количество нормалей в обькте ///тоже количество что и количество вершин
		//uint32_t texture_coord_count;//содержит количество текстурных координат в обькте ///тоже количество что и количество вершин
		///////////////////////////////////////////////////////////////////////////////
		uint32_t face_count;//содержит количество граней в обьекте
		///////////////////////////////////////////////////////////////////////////////
		MeshLoad::ID_Face type;
		///////////////////////////////////////////////////////////////////////////////
		uint32_t vectex_buffer_start;//содержит позицию 1 вершины в вершинном буффере
		uint32_t index_buffer_start;//содержит позицию 1 идекса а индексном буффере
		uint32_t index_count;//содержит количество индексов объекта
		///////////////////////////////////////////////////////////////////////////////
		uint32_t material_id;//содержит идентификатор материала в списке материалов
		//MeshLoad::OBJMaterial material;
		///////////////////////////////////////////////////////////////////////////////
		bool use_bump;//проверка на использование карт нормалей
		bool use_specular;//проверка на использование бликовости
		bool use_diffuse;//проверка на использование диффузной карты
		bool use_reflaction;//проверка на то используються ли локальные отражения
		bool use_clip_opacity;//проверка на использование отсечения текстур(default value = true)
		bool use_alpha;//проверка на то используеться ли смешивание текстур(default value = false)
		bool use_height_in_alpha;//проверка на использование карты высот
	public:
		MeshObject(void);
		~MeshObject();
		///////////////////////////////////////////////////////////////////////////////
		void SetObjectName(const char *name_material, uint32_t lenght);
		///////////////////////////////////////////////////////////////////////////////
		void SetMaterialID(uint32_t id);
		///////////////////////////////////////////////////////////////////////////////
		void SetVertexCount(uint32_t count);//устанавливает количество вершин в объекте
		///////////////////////////////////////////////////////////////////////////////
		void SetFaceCount(uint32_t face_count);//устанавливает количество граней в объекте
		//количество граней отличаеться от количества индексов тем что в зависимости от базового примитива(квад, треугольник)
		//количесво индексов = количество граней * N - где N количесво вершин в базовом примитиве(квад = 4, треугольник = 3); 
		///////////////////////////////////////////////////////////////////////////////
		void SetType(MeshLoad::ID_Face type);//устанавливает вид меша объекта
		///////////////////////////////////////////////////////////////////////////////
		bool IsClipOpacity(void);//возвращает поле use_clip_opacity
		///////////////////////////////////////////////////////////////////////////////
		bool IsUseAlpha(void);//возвращает поле use_alpha
		///////////////////////////////////////////////////////////////////////////////
		bool UseBump(void);//возвращает поле use_bump
		///////////////////////////////////////////////////////////////////////////////
		bool UseHeightAlpha(void);//возвращает поле use_height_in_alpha
		///////////////////////////////////////////////////////////////////////////////
		bool IsUseReflaction(void);//возвращает поле use_reflaction
		///////////////////////////////////////////////////////////////////////////////
		bool IsUseDiffuse(void);//возвращает поле use_diffuse
		///////////////////////////////////////////////////////////////////////////////
		bool IsUseSpecular(void);//возвращает поле use_specular
		///////////////////////////////////////////////////////////////////////////////
		void SetIndexCount(uint32_t value);//установить количество индексов в объкте
		///////////////////////////////////////////////////////////////////////////////
		void SetIndexStart(uint32_t value);//установить индекс первого индекса меша в индексном буффере
		///////////////////////////////////////////////////////////////////////////////
		void SetVertexStart(uint32_t value);//установить индекс первой вешины меша в индексном буффере
		///////////////////////////////////////////////////////////////////////////////
		uint32_t GetIndexCount(void);//возвращает количество индексов в объкте
		///////////////////////////////////////////////////////////////////////////////
		uint32_t GetIndexStart(void);//возвращает индекс первого индекса меша в индексном буффере
		///////////////////////////////////////////////////////////////////////////////
		uint32_t GetVertexStart(void);//возвращает индекс первой вешины меша в индексном буффере
		///////////////////////////////////////////////////////////////////////////////
		MeshLoad::DrawParam GetDrawParam(void);//возвращает 3 параметра в команде рисования меша
		///////////////////////////////////////////////////////////////////////////////
		uint32_t GetMaterialID(void);//возвращает идентификатор материала
		///////////////////////////////////////////////////////////////////////////////
		uint32_t GetVertexCount(void);//возвращает количество вершин в объекте
		///////////////////////////////////////////////////////////////////////////////
		uint32_t GetFaceCount(void);//возвращет количество индексов в объекте
		///////////////////////////////////////////////////////////////////////////////
		void SetClipOpacity(bool val);//устаналивает поле use_clip_opacity
		///////////////////////////////////////////////////////////////////////////////
		void SetUseAlpha(bool val);//устаналивает поле use_alpha
		///////////////////////////////////////////////////////////////////////////////
		void SetUseBump(bool val);//устаналивает поле use_bump
		///////////////////////////////////////////////////////////////////////////////
		void SetUseHeightAlpha(bool val);//устаналивает поле use_height_in_alpha
		///////////////////////////////////////////////////////////////////////////////
		void SetUseReflaction(bool val);//устаналивает поле use_reflaction
		///////////////////////////////////////////////////////////////////////////////
		void SetUseDiffuse(bool val);//устаналивает поле use_diffuse
		///////////////////////////////////////////////////////////////////////////////
		void SetUseSpecular(bool val);//устаналивает поле use_specular
	};
}

//класс представляет свойства одного обьекта в сцене