#define GLEW_STATIC
#include <glew.h>
#include <Windows.h>
#include <stdint.h>

#include <glm/vec3.hpp> // glm::vec3
#include <glm/vec4.hpp> // glm::vec4
#include <glm/mat4x4.hpp> // glm::mat4
#include <glm/gtc/matrix_transform.hpp> // glm::translate, glm::rotate, glm::scale, glm::perspective
#include <glm/gtc/type_ptr.hpp>
#include <glm/gtc/constants.hpp>
#include <stdint.h>
#include <vector>
#include "ShaderSpotLightShadow.h"


#pragma once
namespace ComputeTileShading
{
	class SpotLightShadowMap
	{
		//////////////////////////////////////////////////////////////////////////////////////////////////
		const uint32_t smWidth, smHeight;
		GLuint smFramebuffer;
		GLuint smShadowTextureArray;
		//////////////////////////////////////////////////////////////////////////////////////////////////
		std::vector<glm::mat4> smShadowMatrices;
		//////////////////////////////////////////////////////////////////////////////////////////////////
		Shader::ShaderSpotLightShadow *smShader;
		//////////////////////////////////////////////////////////////////////////////////////////////////
		GLint sViewport[4];
		//////////////////////////////////////////////////////////////////////////////////////////////////
		void Init(void);
	public:
		SpotLightShadowMap(uint32_t smWidth, uint32_t smHeight);
		~SpotLightShadowMap();
		//////////////////////////////////////////////////////////////////////////////////////////////////
		void AddLightShadow(glm::vec4 fPositionAndRadius, glm::vec3 fEyePos, glm::vec3 fLookAt, float fFov);
		//////////////////////////////////////////////////////////////////////////////////////////////////
		GLuint GetMaps(void);
		uint32_t GetShadowMapCount(void);
		const glm::mat4 *GetShadowMapMatrixes(void);
		//////////////////////////////////////////////////////////////////////////////////////////////////
		Shader::ShaderSpotLightShadow *GetShadowShader(void);
		//////////////////////////////////////////////////////////////////////////////////////////////////
		const glm::mat4 * Draw(uint32_t &uCount);
		void EndDraw(void);
		//////////////////////////////////////////////////////////////////////////////////////////////////
		void ReCreateShadowMaps(void);
	};
}

