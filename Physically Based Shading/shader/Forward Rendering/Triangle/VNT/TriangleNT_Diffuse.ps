#version 440 core
////////////////////////////////////////////////////
//layout(early_fragment_tests) in;
////////////////////////////////////////////////////
in struct VertexOut
{
	vec3 w_pos;
	vec3 w_normal;
	vec3 w_eye_dir;
	vec2 w_tex;
} vertex_out;
////////////////////////////////////////////////////
layout (location = 0)uniform mat4 g_proj_view;
layout (location = 1)uniform vec3 g_cam_pos;
////////////////////////////////////////////////////
layout (location = 2)uniform vec4 m_diffuse;
layout (location = 3)uniform vec4 m_specular;
layout (location = 4)uniform vec4 m_emissive;
////////////////////////////////////////////////////
layout (location = 5)uniform vec3 g_lightDir;//mast by normalize
layout (location = 6)uniform vec4 g_lightDiffuse;
layout (location = 7)uniform vec4 g_lightSpecular;
////////////////////////////////////////////////////
layout (location = 8, binding = 0)uniform sampler2D g_diffuse;
////////////////////////////////////////////////////
vec4 comp_ambient()
{
	vec4 ambient = m_diffuse * g_lightDiffuse * m_diffuse.a * g_lightDiffuse.a;
	return vec4(ambient.rgb, 1.0f);
}

vec4 comp_diffuse(vec3 normal, vec3 lightDir)
{
	float NdotL = max(dot(normal, lightDir), 0.0);
	return m_diffuse * g_lightDiffuse * NdotL;
}

vec4 comp_spec(vec3 normal, vec3 viewDir, vec3 lightDir)
{
	float RdotVpow = max(pow(dot(reflect(-lightDir, normal), viewDir), m_specular.a), 0.0);
	return m_specular * g_lightSpecular * RdotVpow;
}
////////////////////////////////////////////////////
layout (location = 0) out vec4 res_color;
////////////////////////////////////////////////////
void main()
{
	vec3 normal   = normalize(vertex_out.w_normal);
	vec3 viewDir  = normalize(-vertex_out.w_eye_dir);
	vec3 lightDir = normalize(-g_lightDir);

	vec4 diff_tex_color = texture(g_diffuse, vertex_out.w_tex);

	if(diff_tex_color.a < 0.6f)discard;

	res_color = m_emissive;
	res_color += (comp_ambient() + comp_diffuse(normal, lightDir)) * diff_tex_color;
	res_color += comp_spec(normal, viewDir, lightDir);

	res_color = vec4(res_color.rgb, 1.0f);
}
